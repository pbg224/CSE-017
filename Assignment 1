/**
 * Program establishes if banks are unsafe
 * @author Pedro Gondim
 * @version 1.0
 * Date: September 3, 2020
 */
import java.util.Scanner;
public class HW1 {
	public static void main(String args [])
	{
		Scanner input = new Scanner(System.in);
		System.out.println("Please enter the amount of banks(integer): ");
		int number_banks = input.nextInt();
		System.out.println("Enter the minimum value for assets:");
		double limit = input.nextDouble();
		input.nextLine();
		double[] balance = new double[number_banks];
		double[][] borrowers = new double[number_banks][number_banks];
		double[]assets = new double[number_banks];
		int[]unsafe_banks = new int[number_banks];
		readBankInfo(input, balance, borrowers);
		
		//calculateAssets(assets, balance, borrowers, unsafe_banks, limit);
		//print(assets);
		//print(unsafe_banks);
		//updateBorrowers(borrowers, unsafe_banks);
		//print(borrowers);
		int[] c = new int[unsafe_banks.length];
		/**do
		{
			copy(c, unsafe_banks);
			updateBorrowers(borrowers, unsafe_banks);
			calculateAssets(assets, balance, borrowers, unsafe_banks, limit);
			System.out.println(" * ");
		}while(!hasChanged(unsafe_banks, c));
		*/
		
		while(true)
		{
			calculateAssets(assets, balance, borrowers, unsafe_banks, limit);
			copy(c, unsafe_banks);
			updateBorrowers(borrowers, unsafe_banks);
			calculateAssets(assets, balance, borrowers, unsafe_banks, limit);
			if(hasChanged(c, unsafe_banks))
				continue;
			else
				break;

		}
		printUnsafeBanks(unsafe_banks);
		
	}
	
	/**
	 * Reads user information about the banks
	 * @param in: Scanner oobject
	 * @param balance: array of bank balance
	 * @param borrowers: array of banks that borrow to each other. 
	 */
	public static void readBankInfo(Scanner in, double[]balance, double[][]borrowers)
	{

		int num_banks = balance.length;
		int i = 0;
		int num_of_borrowers = 0;
		do
		{
			System.out.printf("Enter bank %d balance and borrowers\n", i);
			balance[i] = in.nextDouble();
			num_of_borrowers = in.nextInt();
			int j = 0;
			while(num_of_borrowers > 0)
			{
				 j = in.nextInt();
				 borrowers[i][j] = in.nextDouble();
				 num_of_borrowers--;
			}
			
			num_of_borrowers++;
			i++;
			num_banks--;
			
		}while(num_banks > 0);
		
		/*for(int i = 0; i < borrowers[0].length - 1; i++)
		{
			int num_of_borrowers = 0;
			System.out.printf("Enter bank %d balance and borrowers\n", i);
			balance[i] = in.nextDouble();
			num_of_borrowers = in.nextInt();
			int j = 0;
			while(num_of_borrowers > 0)
			{
				 j = in.nextInt();
				 borrowers[i][j] = in.nextInt();
				 num_of_borrowers--;
			}
		}*/
	}
	
	/**
	 * Calculates bank assets and fill unsafe banks array
	 * @param assets: array of banks assets
	 * @param balance: array of banks balance
	 * @param borrowers: array of banks that borrow to each other 
	 * @param ub: unsafe banks array
	 * @param l: limit for determinating unsafety.
	 */
	public static void calculateAssets(double[] assets, double[]balance, double[][]borrowers, int[]ub, double l)
	{
		for(int i = 0; i < assets.length; i++)
		{
			assets[i] = balance[i];
			for(int j = 0; j < borrowers[0].length; j++)
			{
				assets[i] += borrowers[i][j];
			}
			if(assets[i] < l)
			{
				ub[i] = 1;
			}
		}
		
	}
	
	/**
	 * gives the first array the same values of the second array
	 * @param a: first array
	 * @param b: second array
	 */
	public static void copy(int[] a, int[]b)
	{
		for(int i = 0; i < a.length; i++)
		{
			a[i] = b[i];
		}
	}
	
	/**
	 * Returns a boolean value to see if one of the arrays has changed.
	 * @param a: first array
	 * @param b: second array
	 * @return true or false
	 */
	public static boolean hasChanged(int[] a, int[] b)
	{
		for(int i = 0; i < a.length; i++)
		{
			if(a[i] != b[i])
			{
				return true;
			}
		}
		
		return false;
	}
	
	/**
	 * Updates borrowers array based on unsafe banks list
	 * @param borrowers: borrowers array 
	 * @param ub: unsafe banks array
	 */
	public static void updateBorrowers( double [][] borrowers, int [] ub)
	{
		for(int j = 0; j < ub.length; j++)
		{
			if(ub[j] == 1)
			{
				for(int i = 0; i < borrowers.length; i++)
				{
					borrowers[i][j] = 0;
				}
			}
		}
	}
	
	/**
	 * Prints unsafe banks array
	 * @param ub: unsafe banks array
	 */
	public static void printUnsafeBanks( int[] ub)
	{
		System.out.print("Unsafe Banks: ");
		for(int i = 0; i < ub.length; i++)
		{
			if(ub[i] == 1)
			{
				System.out.print( i + " ");
			}
		}
	}


}
	
	
	
	
	
